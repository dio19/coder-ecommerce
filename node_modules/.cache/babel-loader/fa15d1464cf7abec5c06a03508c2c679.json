{"ast":null,"code":"var _jsxFileName = \"/home/laptop19/coder-ecommerce/src/context/CartContext.js\";\nimport React, { useState } from 'react';\nconst CartContext = React.createContext();\n\nfunction CartProvider({\n  defaultValue = [],\n  children\n}) {\n  const [cart, setCart] = useState(defaultValue);\n\n  const cartLength = () => {\n    return cart.reduce((accumulator, currentValue) => {\n      return accumulator + currentValue.cant;\n    }, 0);\n  };\n\n  const cartPrice = () => {\n    return cart.reduce((accumulator, currentValue) => {\n      return accumulator + currentValue.cant * currentValue.prod.price;\n    }, 0);\n  };\n\n  const addToCart = (newProduct, quantity) => {\n    let prodIndex = cart.findIndex(item => item.prod.id === newProduct.id);\n\n    if (prodIndex === -1) {\n      setCart(cart => [...cart, {\n        prod: newProduct,\n        cant: quantity\n      }]);\n    } else {\n      let modifiedCart = [...cart];\n      modifiedCart[prodIndex].cant += quantity;\n      setCart(modifiedCart);\n    }\n  };\n\n  const dropCart = () => {\n    setCart([]);\n  };\n\n  return /*#__PURE__*/React.createElement(CartContext.Provider, {\n    value: {\n      cart,\n      addToCart,\n      cartLength,\n      cartPrice,\n      dropCart\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, children);\n}\n\nexport { CartProvider, CartContext };","map":{"version":3,"sources":["/home/laptop19/coder-ecommerce/src/context/CartContext.js"],"names":["React","useState","CartContext","createContext","CartProvider","defaultValue","children","cart","setCart","cartLength","reduce","accumulator","currentValue","cant","cartPrice","prod","price","addToCart","newProduct","quantity","prodIndex","findIndex","item","id","modifiedCart","dropCart"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,MAAMC,WAAW,GAAGF,KAAK,CAACG,aAAN,EAApB;;AAEA,SAASC,YAAT,CAAsB;AAACC,EAAAA,YAAY,GAAG,EAAhB;AAAoBC,EAAAA;AAApB,CAAtB,EAAqD;AAEjD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAACI,YAAD,CAAhC;;AAEA,QAAMI,UAAU,GAAG,MAAM;AACrB,WAAOF,IAAI,CAACG,MAAL,CAAY,CAACC,WAAD,EAAcC,YAAd,KAA+B;AAAE,aAAOD,WAAW,GAAGC,YAAY,CAACC,IAAlC;AAAuC,KAApF,EAAsF,CAAtF,CAAP;AACH,GAFD;;AAIA,QAAMC,SAAS,GAAG,MAAM;AACpB,WAAOP,IAAI,CAACG,MAAL,CAAY,CAACC,WAAD,EAAcC,YAAd,KAA+B;AAAE,aAAOD,WAAW,GAAGC,YAAY,CAACC,IAAb,GAAoBD,YAAY,CAACG,IAAb,CAAkBC,KAA3D;AAAiE,KAA9G,EAAgH,CAAhH,CAAP;AACH,GAFD;;AAIA,QAAMC,SAAS,GAAG,CAACC,UAAD,EAAaC,QAAb,KAA0B;AACxC,QAAIC,SAAS,GAAGb,IAAI,CAACc,SAAL,CAAeC,IAAI,IAAIA,IAAI,CAACP,IAAL,CAAUQ,EAAV,KAAiBL,UAAU,CAACK,EAAnD,CAAhB;;AACA,QAAIH,SAAS,KAAK,CAAC,CAAnB,EAAqB;AACjBZ,MAAAA,OAAO,CAAED,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAU;AAACQ,QAAAA,IAAI,EAAEG,UAAP;AAAmBL,QAAAA,IAAI,EAAEM;AAAzB,OAAV,CAAV,CAAP;AACH,KAFD,MAEO;AACH,UAAIK,YAAY,GAAG,CAAC,GAAGjB,IAAJ,CAAnB;AACAiB,MAAAA,YAAY,CAACJ,SAAD,CAAZ,CAAwBP,IAAxB,IAAgCM,QAAhC;AACAX,MAAAA,OAAO,CAAEgB,YAAF,CAAP;AACH;AACJ,GATD;;AAWA,QAAMC,QAAQ,GAAG,MAAM;AACnBjB,IAAAA,OAAO,CAAE,EAAF,CAAP;AACH,GAFD;;AAIA,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACD,MAAAA,IAAD;AAAOU,MAAAA,SAAP;AAAkBR,MAAAA,UAAlB;AAA8BK,MAAAA,SAA9B;AAAyCW,MAAAA;AAAzC,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKnB,QADL,CADJ;AAKH;;AAED,SAAQF,YAAR,EAAsBF,WAAtB","sourcesContent":["import React, {useState} from 'react';\n\nconst CartContext = React.createContext();\n\nfunction CartProvider({defaultValue = [], children}) {\n\n    const [cart, setCart] = useState(defaultValue);\n\n    const cartLength = () => {\n        return cart.reduce((accumulator, currentValue) => { return accumulator + currentValue.cant}, 0);\n    }\n\n    const cartPrice = () => {\n        return cart.reduce((accumulator, currentValue) => { return accumulator + currentValue.cant * currentValue.prod.price}, 0);\n    }\n\n    const addToCart = (newProduct, quantity) => {\n        let prodIndex = cart.findIndex(item => item.prod.id === newProduct.id);\n        if (prodIndex === -1){\n            setCart (cart => [...cart, {prod: newProduct, cant: quantity}]);\n        } else {\n            let modifiedCart = [...cart];\n            modifiedCart[prodIndex].cant += quantity;\n            setCart (modifiedCart);\n        }\n    }\n\n    const dropCart = () => {\n        setCart ([]);\n    }\n\n    return (\n        <CartContext.Provider value={{cart, addToCart, cartLength, cartPrice, dropCart}}>\n            {children}\n        </CartContext.Provider>\n    )\n}\n\nexport {CartProvider, CartContext};"]},"metadata":{},"sourceType":"module"}